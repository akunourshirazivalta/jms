Getting ActiveMQ up and running as your provider is very simple.  All that is required is adding compile dependencies on the @spring-boot-starter-activemq@ library and @pooled-jms@ library in @build.gradle@.

{code}

// ...

dependencies {

    // ...
    compile 'org.grails.plugins:jms:2.0.0.RC2'
    compile 'org.springframework.boot:spring-boot-starter-activemq'
    compile 'org.messaginghub:pooled-jms'
}
{code}

The runtime will recognize that @activemq-spring@ is available and will auto
configure the @jmsConnectionFactory@ in the Spring application context.  The
@org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration@ class
is what is actually configuring the @jmsConnectionFactory@ bean.  If the
default factory settings are not sufficient the factory
may be configured with any of the properties defined in the
@org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties@
class by defining corresponding properties in @application.yml@ with corresponding
property names defined under @spring.activmeq@ as shown below.

{code}
spring:
    activemq:
        brokerUrl: vm://localhost
        pool:
            enabled: true
    jms:
        cache:
            enabled: false
{code}

Note for those who want to use connection pooling: when @spring.activemq.pool.enabled@ is true then SpringBoot will create a @pooledJmsConnectionFactory@ bean rather than @jmsConnectionFactory@.
You can add the following line in @resources.groovy@ to use a spring bean alias in order to get around this.

{code}
beans = {

    // ...
    springConfig.addAlias('jmsConnectionFactory', 'pooledJmsConnectionFactory')
}
{code}